options{  JDK_VERSION = "1.6";  CACHE_TOKENS=true;  JAVA_UNICODE_ESCAPE=true;  STATIC=false;  NODE_USES_PARSER=true;  MULTI=true;  VISITOR=true;  VISITOR_EXCEPTION="MathParseException";  VISITOR_DATA_TYPE="Boolean";}PARSER_BEGIN(MathParser)package com.educatedsolutions.parser.javacc;
import java.io.*;import com.educatedsolutions.parser.*;
public class MathParser{}PARSER_END(MathParser)SKIP :{  " "| "\t"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LINE_END */{  < LINE_END : "\n" | "\r">}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL >  | < HEX_LITERAL >  >| < #DECIMAL_LITERAL : ([ "0"-"9" ])+ >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >}TOKEN : /* BINDING_VARIABLE */{  < BINDING_VARIABLE :    ( < UPPERCASE_LETTER > )+  >| < #UPPERCASE_LETTER : [ "A"-"Z" ] >}TOKEN : /* EQUATION_VARIABLE */{  < EQUATION_VARIABLE :    < LOWERCASE_LETTER >  >| < #LOWERCASE_LETTER : [ "a"-"z" ] >}TOKEN : /* INEQUALITY_OPERATOR */{  < INEQUALITY_OPERATOR : ( "<" | ">" | "<=" | ">=" ) >}SimpleNode Start() :{}{  Statement() < LINE_END >  {    return jjtThis;  }}void Statement() :{}{	LOOKAHEAD(Expression() "=") Equality() |	LOOKAHEAD(Expression() < INEQUALITY_OPERATOR >) Inequality() |	Assignment() |    Expression()}void Equality() :{}{    Expression() "=" Expression()}    void Inequality() :{}{    Expression() < INEQUALITY_OPERATOR > Expression()}    void Assignment() :{}{    BindingVariable() ":=" Expression()}    void Expression() :{}{  AdditiveExpression()}void AdditiveExpression() :{}{  MultiplicativeExpression()  (    (      "+"    | "-"    )    MultiplicativeExpression()  )*}void MultiplicativeExpression() :{}{  UnaryExpression()  (    (      "*"    | "/"    | "%"    )    UnaryExpression()  )*}void UnaryExpression() :{}{  "(" Expression() ")"| EquationVariable()| Integer()}void BindingVariable() :{}{  < BINDING_VARIABLE >}void EquationVariable() :{}{  < EQUATION_VARIABLE >}void Integer() :{}{  < INTEGER_LITERAL >}
