options{  JDK_VERSION = "1.6";  CACHE_TOKENS=true;  JAVA_UNICODE_ESCAPE=true;  STATIC=false;  NODE_USES_PARSER=true;  MULTI=true;  VISITOR=true;  VISITOR_EXCEPTION="MathParseException";  VISITOR_DATA_TYPE="Boolean";}PARSER_BEGIN(MathParser)package com.educatedsolutions.parser.javacc;
import java.io.*;import com.educatedsolutions.parser.*;
public class MathParser {		public enum Constants {		EULER,		PI	}}PARSER_END(MathParser)SKIP :{  " "| "\t"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LINE_END */{  < LINE_END : "\n" | "\r">}TOKEN : /* LITERALS */{  < INTEGER_LITERAL : (["0"-"9"])+ | (["1"-"9"])+ "E+" ["1"-"9"] (["0"-"9"])* >| < REAL_LITERAL: (["0"-"9"])+ "." (["0"-"9"])+ | (["0"-"9"])+ "E-" ["1"-"9"] (["0"-"9"])* >}TOKEN : /* BINDING_VARIABLE */{  < BINDING_VARIABLE : ( [ "A"-"Z" ] )+ >| < VARIABLE :  [ "a"-"d","f"-"h","j"-"z" ] >| < EULER_NUMBER : "e" >| < IMAGINARY_UNIT : "i" >| <  PI : "\\pi" >}TOKEN : /* INEQUALITY_OPERATOR */{  < INEQUALITY_OPERATOR : ( "<" | ">" | "<=" | ">=" ) >| < ADDITIVE_OPERATOR : ( "+" | "-" ) >}SimpleNode Start() :{}{  Statement() < LINE_END >  {    return jjtThis;  }}void Statement() :{}{	LOOKAHEAD(Expression() "=") Equality()|   LOOKAHEAD(Expression() < INEQUALITY_OPERATOR >) Inequality()|	Assignment()|   Expression()}void Equality() :{}{    Expression() "=" Expression()}    void Inequality() :{}{    Expression() < INEQUALITY_OPERATOR > Expression()}    void Assignment() :{}{    BindingVariable() ":=" Expression()}    void Expression() :{}{    AdditiveExpression()}void PolynomialTerm() :{}{    ( Real() | Integer() ) Variable() [ "^" Integer() ]|	Variable() [ "^" Integer() ]}void AdditiveExpression() :{}{    MultiplicativeExpression() ( < ADDITIVE_OPERATOR > MultiplicativeExpression() )*}void MultiplicativeExpression() :{}{    PrimaryExpression() ( "*" PrimaryExpression() )*}void PrimaryExpression() :{}{	"(" Expression() ")"|	LOOKAHEAD(2) PolynomialTerm()|   Number()|	Constant()}void BindingVariable() :{}{    < BINDING_VARIABLE >}void Variable() :{}{    < VARIABLE >}void Constant() :{}{    < EULER_NUMBER >|	< PI >}void Number() :{}{    LOOKAHEAD(2) Fraction()|   Integer()|   Real()}void Fraction() :{}{	Integer() "/" ( Integer() | Real() )|	Real() "/" ( Integer() | Real() )}void Integer() :{}{    < INTEGER_LITERAL >}void Real() :{}{    < REAL_LITERAL >}
