options{  JDK_VERSION = "1.6";  CACHE_TOKENS=true;  JAVA_UNICODE_ESCAPE=true;  STATIC=false;  NODE_USES_PARSER=true;  MULTI=true;  VISITOR=true;  VISITOR_DATA_TYPE="java.util.List<com.educatedsolutions.parser.terms.Term>";  VISITOR_RETURN_TYPE="com.educatedsolutions.parser.terms.Term";}PARSER_BEGIN(MathParser)package com.educatedsolutions.parser.javacc;
import java.io.*;import com.educatedsolutions.parser.*;import org.slf4j.Logger;import org.slf4j.LoggerFactory;
public class MathParser {	private static final Logger LOG = LoggerFactory.getLogger(MathParser.class);		public enum Constants {		EULER,		PI	}}PARSER_END(MathParser)SKIP :{  " "| "\t"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LINE_END */{  < LINE_END : "\n" | "\r">}TOKEN : /* LITERALS */{  < INTEGER_LITERAL : (["0"-"9"])+ | (["1"-"9"])+ "E+" ["1"-"9"] (["0"-"9"])* >| < REAL_LITERAL: (["0"-"9"])+ "." (["0"-"9"])+ | (["0"-"9"])+ "E-" ["1"-"9"] (["0"-"9"])* >}TOKEN : /* BINDING_VARIABLE */{  < BINDING_VARIABLE : ( [ "A"-"Z" ] )+ >| < VARIABLE :  [ "a"-"d","f"-"h","j"-"z" ] >| < EULER_NUMBER : "e" >| < IMAGINARY_UNIT : "i" >| <  PI : "\\pi" >}TOKEN : /* INEQUALITY_OPERATOR */{  < INEQUALITY_OPERATOR : ( "<" | ">" | "<=" | ">=" ) >| < MULTIPLICATIVE_OPERATOR : ( "*" | "/" ) >}SimpleNode Start() :{ }{  Statement() < LINE_END > { return jjtThis; }}void Statement() :{ }{	LOOKAHEAD(Expression() "=") Equality()|   LOOKAHEAD(Expression() < INEQUALITY_OPERATOR >) Inequality()|	Assignment()|   Expression()}void Equality() :{ }{    Expression() "=" Expression()}    void Inequality() :{ Token t; }{    Expression() t = < INEQUALITY_OPERATOR > { jjtThis.setImage(t); } Expression()}    void Assignment() :{ }{    BindingVariable() ":=" Expression()}    void Expression() :{ }{    AdditiveExpression()}void PolynomialTerm() :{ }{    ( UnaryExpression() | Number() ) Variable() [ "^" Integer() ]|	Variable() [ "^" Integer() ]}void AdditiveExpression() :{ }{    MultiplicativeExpression()    ( ( "+" { jjtThis.setImage("+"); } |        "-" { jjtThis.setImage("-"); } ) MultiplicativeExpression() )*}void MultiplicativeExpression() :{ Token t; }{    PrimaryExpression() ( t = < MULTIPLICATIVE_OPERATOR > { jjtThis.setImage(t); } PrimaryExpression() )*}void PrimaryExpression() :{ }{	"(" Expression() ")"|	LOOKAHEAD(3) PolynomialTerm()|	UnaryExpression()|   Number()|	Constant()}void UnaryExpression():{}{  "-" Number()}void BindingVariable() :{ Token t; }{    t = < BINDING_VARIABLE >  { jjtThis.setImage(t); }}void Variable() :{ Token t; }{    t = < VARIABLE >  { jjtThis.setImage(t); }}void Constant() :{ }{    < EULER_NUMBER > { jjtThis.setImage("e"); }|	< PI > { jjtThis.setImage("pi"); }}void Number() :{}{    Integer()|   Real()}void Integer() :{ Token t; }{    t = < INTEGER_LITERAL >  { jjtThis.setImage(t); }}void Real() :{ Token t; }{    t = < REAL_LITERAL >  { jjtThis.setImage(t); }}
